package com.sunbeam.booking.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.sunbeam.booking.dto.BookingConfirmationRequest;
import com.sunbeam.booking.dto.BookingDTO;
import com.sunbeam.booking.dto.SeatSelectionRequest;
import com.sunbeam.booking.service.BookingService;

import lombok.RequiredArgsConstructor;

/**
 * ЁЯУЭ BookingController - Booking рд╕рдВрдмрдВрдзрд┐рдд API Handlers
 * ЁЯУМ Seat Selection, Booking Confirmation, Booking Management API рдЖрд╣реЗрдд.
 */
@RestController
@RequestMapping("/bookings")
@RequiredArgsConstructor
public class BookingController {

	@Autowired
    private final BookingService bookingService;

    /**
     * тЬЕ Select Seats API
     * ЁЯУМ рд╡рд╛рдкрд░рдХрд░реНрддрд╛ рдмрд╕ рд╕реАрдЯ рдирд┐рд╡рдбрддреЛ.
     * ЁЯЯв URL: POST /api/bookings/select-seats
     */
    @PostMapping("/select-seats")
    public ResponseEntity<?> selectSeats(@RequestBody SeatSelectionRequest request) {
        boolean isSelected = bookingService.selectSeats(request);
        if (isSelected) {
            return ResponseEntity.ok("тЬЕ Seats selected successfully!");
        } else {
            return ResponseEntity.status(400).body("тЭМ Seats selection failed. Please try again!");
        }
    }
    
    /**
     * тЬЕ Confirm Booking API
     * ЁЯУМ рд╡рд╛рдкрд░рдХрд░реНрддреНрдпрд╛рдиреЗ рдирд┐рд╡рдбрд▓реЗрд▓реА рд╕реАрдЯ рдмреБрдХ рдХрд░реВрди рдкреЗрдореЗрдВрдЯ рд╡ рдмреБрдХрд┐рдВрдЧ рдЬрдирд░реЗрд╢рди рдХрд░рддреЗ.
     * ЁЯЯв URL: POST /api/bookings/confirm
     */
    @PostMapping("/confirm")
    public ResponseEntity<?> confirmBooking(@RequestBody BookingConfirmationRequest request) {
        boolean isConfirmed = bookingService.confirmBooking(request);
        if (isConfirmed) {
            return ResponseEntity.ok("тЬЕ Booking confirmed successfully!");
        } else {
            return ResponseEntity.status(400).body("тЭМ Booking confirmation failed. Please try again!");
        }
    }
    
    /**
     * тЬЕ Get Booking History API
     * ЁЯУМ рд╡рд╛рдкрд░рдХрд░реНрддреНрдпрд╛рдЪреНрдпрд╛ рд╕рд░реНрд╡ рдмреБрдХрд┐рдВрдЧреНрд╕ (рд╣рд┐рд╕реНрдЯреНрд░реА) рдорд┐рд│рд╡рддреЗ.
     * ЁЯЯв URL: GET /api/bookings/history/{userId}
     */
    @GetMapping("/history/{userId}")
    public ResponseEntity<?> getBookingHistory(@PathVariable Long userId) {
        return ResponseEntity.ok(bookingService.getBookingHistory(userId));
    }
    
    /**
     * тЬЕ Cancel Booking & Refund Process API
     * ЁЯУМ рдмреБрдХрд┐рдВрдЧ рд░рджреНрдж рдХрд░реВрди рд╡рд╛рдкрд░рдХрд░реНрддреНрдпрд╛рд▓рд╛ рд░рд┐рдлрдВрдб рдкреНрд░реЛрд╕реЗрд╕ рд╕реБрд░реБ рдХрд░рддреЗ.
     * ЁЯЯв URL: POST /api/bookings/cancel/{bookingId}
     */
    @PostMapping("/cancel/{bookingId}")
    public ResponseEntity<?> cancelBooking(@PathVariable Long bookingId) {
        boolean cancelStatus = bookingService.cancelBooking(bookingId);
        if (cancelStatus) {
            return ResponseEntity.ok("тЬЕ Booking cancelled successfully. Refund process initiated.");
        } else {
            return ResponseEntity.status(404).body("тЭМ Booking not found or already cancelled.");
        }
    }
    
    /**
     * тЬЕ Get Booking Details API
     * ЁЯУМ рдмреБрдХрд┐рдВрдЧ рддрдкрд╢реАрд▓ рдорд┐рд│рд╡рдгреНрдпрд╛рд╕рд╛рдареА рд╡рд╛рдкрд░рд▓рд╛ рдЬрд╛рддреЛ.
     * ЁЯЯв URL: GET /api/bookings/{bookingId}
     */
    @GetMapping("/{bookingId}")
    public ResponseEntity<?> getBookingDetails(@PathVariable Long bookingId) {
        BookingDTO bookingDTO = bookingService.getBookingDetails(bookingId);
        if (bookingDTO != null) {
            return ResponseEntity.ok(bookingDTO);
        } else {
            return ResponseEntity.status(404).body("тЭМ Booking not found.");
        }
    }
}
