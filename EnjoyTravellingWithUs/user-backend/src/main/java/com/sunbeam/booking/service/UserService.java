package com.sunbeam.booking.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sunbeam.booking.dto.LoginDTO;
import com.sunbeam.booking.dto.UserDTO;
import com.sunbeam.booking.entity.User;
import com.sunbeam.booking.repository.UserRepository;

import jakarta.transaction.Transactional;

/**
 * üìù UserService - User Authentication ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ Service Methods
 * üìå Database Operations Handle ‡§ï‡§∞‡§§‡•ã.
 */
@Service
@Transactional
public class UserService {

	@Autowired
	private final UserRepository userRepository = null;

    /**
     * ‚úÖ User Registration Method
     * üìå DTO ‡§Æ‡§ß‡•Ç‡§® Data ‡§ò‡•á‡§ä‡§® Entity ‡§Æ‡§ß‡•ç‡§Ø‡•á Convert ‡§ï‡§∞‡•Ç‡§® Database ‡§Æ‡§ß‡•ç‡§Ø‡•á Save ‡§ï‡§∞‡§§‡•ã.
     */
    public boolean registerUser(UserDTO userDTO) {
        if (userRepository.existsByEmail(userDTO.getEmail())) {
            return false; // Email jr Registered asel tr Registration Fail
        }

        User user = new User();
        user.setFullName(userDTO.getFullName());
        user.setEmail(userDTO.getEmail());
        user.setPassword(userDTO.getPassword());
        user.setPhone(userDTO.getPhone());

        userRepository.save(user);
        return true;
    }
    
    /**
     * ‚úÖ User Login Method
     * üìå Email & Password verify ‡§ï‡§∞‡•Ç‡§® User ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§™‡§∞‡§§ ‡§™‡§æ‡§†‡§µ‡§§‡•ã.
     */
    public UserDTO loginUser(LoginDTO loginDTO) {
        Optional<User> userOpt = userRepository.findByEmail(loginDTO.getEmail());
        
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            
            
            if (user.getPassword().equals(loginDTO.getPassword())) { 
                UserDTO userDTO = new UserDTO();
                userDTO.setFullName(user.getFullName());
                userDTO.setEmail(user.getEmail());
                userDTO.setPhone(user.getPhone());
                return userDTO; // Login Successful
            }
        }
        return null; // Invalid Credentials
    }
    
    /**
     * ‚úÖ User Logout Method
     * üìå User ‡§≤‡§æ Logout ‡§ï‡§∞‡§§‡•ã. (Session invalidate)
     */
    public boolean logoutUser(Long userId) {
        // ‡§ú‡§∞ User ‡§∏‡§æ‡§™‡§°‡§≤‡§æ ‡§Ü‡§£‡§ø ‡§§‡•ç‡§Ø‡§æ‡§ö‡§æ session successfully end ‡§ù‡§æ‡§≤‡§æ ‡§§‡§∞ true return ‡§ï‡§∞‡§§‡•ã.
        // TODO: Session management implement ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ü‡§π‡•á.
        return true; // Placeholder for now.
    }
    
    /**
     * ‚úÖ Get User Profile Method
     * üìå User ‡§ö‡§Ç Profile ‡§°‡•á‡§ü‡§æ Database ‡§ï‡§°‡•Ç‡§® ‡§ò‡•á‡§ä‡§® UserDTO ‡§Æ‡§ß‡•ç‡§Ø‡•á Set ‡§ï‡§∞‡§§‡•ã.
     */
    public UserDTO getUserProfile(Long userId) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            UserDTO userDTO = new UserDTO();
            userDTO.setFullName(user.getFullName());
            userDTO.setEmail(user.getEmail());
            userDTO.setPhone(user.getPhone());
            return userDTO; // Return User Profile
        }
        return null; // Profile Not Found
    }
    
    /**
     * ‚úÖ Update User Profile Method
     * üìå User ‡§ö‡§Ç Profile Update ‡§ï‡§∞‡§§‡•ã Database ‡§Æ‡§ß‡•ç‡§Ø‡•á.
     */
    public boolean updateUserProfile(Long userId, UserDTO userDTO) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setFullName(userDTO.getFullName());
            user.setEmail(userDTO.getEmail());
            user.setPhone(userDTO.getPhone());
            userRepository.save(user); // Save Updated User
            return true;
        }
        return false; // User Not Found
    }
    
    /**
     * ‚úÖ Change Password Method
     * üìå User ‡§ö‡§Ç Password Update ‡§ï‡§∞‡§§‡•ã Database ‡§Æ‡§ß‡•ç‡§Ø‡•á.
     */
    public boolean changePassword(Long userId, String newPassword) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setPassword(newPassword); // Password Update
            userRepository.save(user); // Save Updated User
            return true;
        }
        return false; // User Not Found
    }
}
