package com.sunbeam.booking.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.sunbeam.booking.entity.Wallet;
import com.sunbeam.booking.repository.WalletRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class WalletService {

    private final WalletRepository walletRepository;

    /**
     * ‚úÖ Check Wallet Balance Method
     */
    public double checkBalance(Long userId) {
        Wallet wallet = walletRepository.findByUserId(userId);
        if (wallet != null) {
            return wallet.getBalance();
        }
        return 0.0; // User not found, return 0 balance
    }
    
    /**
     * ‚úÖ Add Money Method
     */
    public boolean addMoney(Long userId, double amount) {
        Wallet wallet = walletRepository.findByUserId(userId);
        if (wallet != null) {
            System.out.println("Current Balance: ‚Çπ" + wallet.getBalance()); // Debugging
            wallet.setBalance(wallet.getBalance() + amount);
            walletRepository.save(wallet);
            return true;
        }
        return false; // User not found, fail the operation
    }
    
    /**
     * ‚úÖ Make Payment Method
     * üìå ‡§Ø‡•Å‡§ú‡§∞‡§ö‡•ç‡§Ø‡§æ ‡§µ‡•â‡§≤‡•á‡§ü‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§ï‡§Æ‡•Ä ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§µ‡§æ‡§™‡§∞‡§≤‡§æ ‡§ú‡§æ‡§§‡•ã.
     */
    public boolean makePayment(Long userId, double amount) {
        Wallet wallet = walletRepository.findByUserId(userId);
        if (wallet != null && wallet.getBalance() >= amount) {
            wallet.setBalance(wallet.getBalance() - amount);
            walletRepository.save(wallet);
            return true;
        }
        return false; // Insufficient balance or user not found
    }
    
    /**
     * ‚úÖ Get Transaction History Method
     * üìå ‡§Ø‡•Å‡§ú‡§∞‡§ö‡•ç‡§Ø‡§æ ‡§µ‡•â‡§≤‡•á‡§ü ‡§ü‡•ç‡§∞‡§æ‡§Ç‡§ù‡•Ö‡§ï‡•ç‡§∂‡§® ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§™‡§∞‡§§ ‡§Ü‡§£‡§£‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§µ‡§æ‡§™‡§∞‡§≤‡§æ ‡§ú‡§æ‡§§‡•ã.
     */
    public List<String> getTransactionHistory(Long userId) {
        // Ideally, this should be retrieved from a Transaction entity or separate table
        // For now, returning mock data as an example
        List<String> transactions = new ArrayList<>();
        transactions.add("Added ‚Çπ500 on 2025-01-01");
        transactions.add("Paid ‚Çπ200 for booking on 2025-01-05");
        transactions.add("Added ‚Çπ300 on 2025-01-10");
        return transactions;
    }
}
